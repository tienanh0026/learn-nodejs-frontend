name: Docker Image CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4

      - name: Set Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run install
        uses: borales/actions-yarn@v4
        with: 
          cmd: install

      - name: Lint code
        uses: borales/actions-yarn@v4
        with: 
          cmd: lint

  build:
    runs-on: ubuntu-latest

    env:
      PORT: 3001

    outputs:
      port: ${{ env.PORT }}

    steps:
      - uses: actions/checkout@v4
      - name: Build the Docker image using Docker Compose
        run: docker compose -f docker-compose.yml build

  verify:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4
      - name: Run and verify the Docker container
        env:
          PORT: ${{ needs.build.outputs.port }}
        run: |
          echo "Starting container..."
          docker compose -f docker-compose.yml up -d
          echo "Waiting for the container to start..."
          for i in {1..20}; do
            if curl -f http://localhost:${PORT}; then
              echo "Service is up and running!"
              break
            fi
            echo "Retrying in 5 seconds..."
            sleep 5
          done
          if ! curl -f http://localhost:${PORT}; then
            echo "Service did not start in time."
            docker logs $(docker ps -q --filter "ancestor=<image-name>")
            exit 1
          fi
          docker ps  # Check running containers
